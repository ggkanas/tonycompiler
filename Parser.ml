type token =
  | T_and
  | T_or
  | T_char
  | T_decl
  | T_def
  | T_exit
  | T_list
  | T_head
  | T_tail
  | T_mod
  | T_new
  | T_nil
  | T_nil_qm
  | T_not
  | T_ref
  | T_return
  | T_skip
  | T_for
  | T_end
  | T_if
  | T_else
  | T_elsif
  | T_int
  | T_bool
  | T_true
  | T_false
  | T_intconst of (int)
  | T_id of (Ast.id)
  | T_charconst of (char)
  | T_stringconst of (string)
  | T_eq
  | T_uneq
  | T_leq
  | T_geq
  | T_lower
  | T_greater
  | T_plus
  | T_minus
  | T_times
  | T_div
  | T_cons
  | T_rparen
  | T_lparen
  | T_lbrack
  | T_rbrack
  | T_comma
  | T_semicol
  | T_assign
  | T_colon
  | T_eof

open Parsing;;
let _ = parse_error;;
# 2 "Parser.mly"
    open Ast
    open Types
    open Error

    let second t =
        match t with
        | (_, b, _) -> b
        (*| _ -> raise Terminate in
            Printf.eprintf ("Internal error occurred at %s:%d,@ tuple has no second element" "Parser.mly" 9)*)
    let third t =
        match t with
        | (_, _, c) -> c
        (*| _ -> raise Terminate in
            Printf.eprintf ("Internal error occurred at %s:%d,@ tuple has no third element" "Parser.mly" 9)*)
# 71 "Parser.ml"
let yytransl_const = [|
  257 (* T_and *);
  258 (* T_or *);
  259 (* T_char *);
  260 (* T_decl *);
  261 (* T_def *);
  262 (* T_exit *);
  263 (* T_list *);
  264 (* T_head *);
  265 (* T_tail *);
  266 (* T_mod *);
  267 (* T_new *);
  268 (* T_nil *);
  269 (* T_nil_qm *);
  270 (* T_not *);
  271 (* T_ref *);
  272 (* T_return *);
  273 (* T_skip *);
  274 (* T_for *);
  275 (* T_end *);
  276 (* T_if *);
  277 (* T_else *);
  278 (* T_elsif *);
  279 (* T_int *);
  280 (* T_bool *);
  281 (* T_true *);
  282 (* T_false *);
  287 (* T_eq *);
  288 (* T_uneq *);
  289 (* T_leq *);
  290 (* T_geq *);
  291 (* T_lower *);
  292 (* T_greater *);
  293 (* T_plus *);
  294 (* T_minus *);
  295 (* T_times *);
  296 (* T_div *);
  297 (* T_cons *);
  298 (* T_rparen *);
  299 (* T_lparen *);
  300 (* T_lbrack *);
  301 (* T_rbrack *);
  302 (* T_comma *);
  303 (* T_semicol *);
  304 (* T_assign *);
  305 (* T_colon *);
  306 (* T_eof *);
    0|]

let yytransl_block = [|
  283 (* T_intconst *);
  284 (* T_id *);
  285 (* T_charconst *);
  286 (* T_stringconst *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\003\000\003\000\016\000\016\000\017\000\017\000\
\004\000\004\000\005\000\005\000\005\000\005\000\005\000\014\000\
\014\000\014\000\014\000\006\000\018\000\018\000\007\000\015\000\
\015\000\019\000\019\000\020\000\020\000\008\000\008\000\008\000\
\008\000\008\000\009\000\009\000\009\000\010\000\010\000\011\000\
\023\000\023\000\021\000\021\000\012\000\012\000\012\000\012\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\000\000"

let yylen = "\002\000\
\001\000\007\000\002\000\001\000\004\000\003\000\001\000\003\000\
\002\000\001\000\001\000\001\000\001\000\003\000\004\000\000\000\
\002\000\002\000\002\000\002\000\000\000\003\000\003\000\000\000\
\002\000\000\000\006\000\000\000\004\000\001\000\001\000\002\000\
\008\000\010\000\001\000\003\000\001\000\001\000\003\000\003\000\
\001\000\002\000\001\000\003\000\001\000\001\000\004\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\002\000\002\000\003\000\001\000\001\000\002\000\
\005\000\001\000\004\000\004\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\078\000\001\000\013\000\000\000\011\000\
\012\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\
\000\000\003\000\000\000\000\000\006\000\000\000\000\000\010\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\015\000\
\009\000\000\000\000\000\005\000\020\000\017\000\018\000\019\000\
\031\000\000\000\035\000\000\000\000\000\000\000\046\000\000\000\
\030\000\000\000\000\000\008\000\000\000\023\000\000\000\000\000\
\000\000\074\000\000\000\000\000\070\000\071\000\064\000\065\000\
\000\000\000\000\000\000\048\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\068\000\000\000\061\000\
\062\000\053\000\055\000\056\000\059\000\060\000\057\000\058\000\
\049\000\050\000\051\000\052\000\054\000\000\000\000\000\000\000\
\000\000\041\000\000\000\000\000\040\000\025\000\002\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\066\000\000\000\
\039\000\000\000\000\000\000\000\042\000\047\000\076\000\077\000\
\000\000\075\000\000\000\000\000\044\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\033\000\000\000\000\000\000\000\034\000\000\000\029\000\027\000"

let yydgoto = "\002\000\
\004\000\027\000\011\000\022\000\023\000\028\000\029\000\075\000\
\049\000\072\000\068\000\069\000\107\000\030\000\076\000\013\000\
\025\000\054\000\137\000\141\000\108\000\102\000\109\000"

let yysindex = "\014\000\
\030\255\000\000\003\255\000\000\000\000\000\000\253\254\000\000\
\000\000\255\254\254\254\235\254\000\000\177\255\014\255\102\255\
\006\255\000\000\231\254\177\255\000\000\007\255\244\254\000\000\
\023\255\003\255\102\255\102\255\102\255\052\255\000\000\000\000\
\000\000\047\000\028\255\000\000\000\000\000\000\000\000\000\000\
\000\000\226\001\000\000\016\255\226\001\035\255\000\000\052\255\
\000\000\000\000\217\254\000\000\051\255\000\000\041\255\048\255\
\177\255\000\000\049\255\226\001\000\000\000\000\000\000\000\000\
\226\001\226\001\226\001\000\000\037\255\118\001\050\255\047\255\
\240\255\190\001\052\255\079\255\226\001\226\001\028\255\226\001\
\226\001\055\255\226\001\239\001\000\000\000\000\010\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\226\001\016\255\226\001\
\052\255\000\000\062\000\068\255\000\000\000\000\000\000\103\000\
\118\001\000\000\022\001\064\001\152\001\076\001\000\000\118\001\
\000\000\045\000\052\255\226\001\000\000\000\000\000\000\000\000\
\118\000\000\000\016\255\089\255\000\000\000\000\071\255\226\001\
\103\255\052\255\004\000\078\255\112\255\052\255\052\255\052\255\
\000\000\113\255\052\255\052\255\000\000\089\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\227\255\
\000\000\000\000\000\000\000\000\000\000\096\255\000\000\000\000\
\000\000\000\000\227\255\227\255\227\255\000\000\000\000\000\000\
\000\000\000\000\161\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\127\255\000\000\122\255\
\000\000\176\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\176\255\063\001\220\254\000\000\
\000\000\000\000\067\255\000\000\000\000\000\000\161\000\000\000\
\000\000\000\000\000\000\218\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\100\255\000\000\000\000\000\000\000\000\000\000\
\244\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\
\000\000\000\000\067\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\038\255\000\000\000\000\000\000\000\000\
\131\255\000\000\000\000\000\000\000\000\122\255\000\000\000\000\
\000\000\000\000\067\255\122\255\000\000\038\255\000\000\000\000"

let yygindex = "\000\000\
\000\000\150\000\126\000\000\000\254\255\000\000\019\000\234\255\
\215\255\155\255\226\255\248\255\239\255\075\000\185\255\141\000\
\120\000\077\000\020\000\000\000\055\000\000\000\000\000"

let yytablesize = 792
let yytable = "\050\000\
\012\000\121\000\071\000\110\000\077\000\006\000\010\000\048\000\
\078\000\007\000\038\000\019\000\038\000\050\000\001\000\035\000\
\006\000\050\000\017\000\032\000\007\000\051\000\017\000\012\000\
\070\000\008\000\009\000\073\000\020\000\135\000\010\000\017\000\
\043\000\024\000\003\000\051\000\008\000\009\000\033\000\051\000\
\014\000\015\000\084\000\046\000\050\000\047\000\016\000\085\000\
\086\000\087\000\031\000\132\000\024\000\034\000\082\000\021\000\
\026\000\041\000\026\000\112\000\113\000\071\000\115\000\116\000\
\036\000\118\000\051\000\042\000\043\000\044\000\146\000\045\000\
\050\000\053\000\050\000\150\000\151\000\074\000\079\000\046\000\
\077\000\047\000\123\000\080\000\120\000\024\000\122\000\024\000\
\024\000\071\000\081\000\083\000\050\000\104\000\051\000\103\000\
\051\000\111\000\117\000\129\000\050\000\038\000\039\000\040\000\
\006\000\026\000\003\000\050\000\007\000\125\000\136\000\050\000\
\050\000\050\000\051\000\142\000\050\000\050\000\139\000\138\000\
\147\000\148\000\051\000\140\000\008\000\009\000\144\000\045\000\
\045\000\051\000\145\000\149\000\045\000\051\000\051\000\051\000\
\045\000\007\000\051\000\051\000\024\000\043\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\028\000\005\000\037\000\
\018\000\052\000\045\000\114\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\152\000\045\000\045\000\045\000\045\000\045\000\045\000\
\063\000\063\000\133\000\006\000\000\000\063\000\000\000\007\000\
\000\000\063\000\000\000\000\000\000\000\000\000\000\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\008\000\
\009\000\000\000\000\000\063\000\000\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\072\000\072\000\063\000\063\000\063\000\072\000\
\063\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
\088\000\089\000\016\000\016\000\016\000\072\000\016\000\072\000\
\000\000\090\000\000\000\000\000\000\000\000\000\016\000\000\000\
\016\000\000\000\000\000\072\000\088\000\089\000\072\000\072\000\
\072\000\000\000\072\000\000\000\000\000\090\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\105\000\000\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\088\000\089\000\000\000\
\000\000\006\000\000\000\000\000\143\000\007\000\090\000\000\000\
\000\000\000\000\000\000\000\000\000\000\020\000\088\000\089\000\
\000\000\000\000\000\000\000\000\000\000\008\000\009\000\090\000\
\000\000\000\000\000\000\091\000\092\000\093\000\094\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\000\000\000\000\
\000\000\000\000\000\000\131\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\088\000\
\089\000\000\000\000\000\124\000\000\000\000\000\000\000\000\000\
\090\000\000\000\000\000\000\000\000\000\000\000\088\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\
\000\000\000\000\000\000\000\000\000\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000\
\000\000\000\000\000\000\126\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\000\000\
\000\000\000\000\134\000\021\000\021\000\021\000\021\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\021\000\021\000\000\000\021\000\037\000\000\000\021\000\
\021\000\000\000\000\000\000\000\021\000\000\000\021\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
\000\000\000\000\021\000\037\000\000\000\037\000\000\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\048\000\000\000\037\000\037\000\048\000\
\037\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\069\000\000\000\000\000\069\000\069\000\
\069\000\000\000\069\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\088\000\089\000\000\000\000\000\000\000\036\000\
\000\000\036\000\000\000\090\000\000\000\000\000\088\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\
\000\000\036\000\036\000\000\000\036\000\000\000\000\000\000\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\119\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\127\000\
\088\000\089\000\000\000\000\000\032\000\000\000\000\000\000\000\
\000\000\090\000\000\000\000\000\088\000\089\000\032\000\032\000\
\032\000\032\000\032\000\032\000\032\000\090\000\000\000\000\000\
\000\000\000\000\032\000\000\000\032\000\000\000\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\128\000\091\000\092\000\093\000\094\000\095\000\096\000\
\097\000\098\000\099\000\100\000\101\000\130\000\088\000\089\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\091\000\092\000\093\000\094\000\
\095\000\096\000\097\000\098\000\099\000\100\000\101\000\055\000\
\056\000\000\000\057\000\058\000\059\000\060\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\062\000\063\000\046\000\064\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\065\000\066\000\000\000\000\000\
\000\000\000\000\067\000\000\000\031\000\055\000\056\000\000\000\
\057\000\058\000\059\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\061\000\062\000\
\063\000\046\000\064\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\066\000\000\000\000\000\000\000\106\000\
\067\000\055\000\056\000\000\000\057\000\058\000\059\000\060\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\090\000\000\000\061\000\062\000\063\000\046\000\064\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\065\000\066\000\
\000\000\000\000\000\000\000\000\067\000\091\000\092\000\093\000\
\094\000\095\000\096\000\097\000\098\000\099\000\100\000\101\000"

let yycheck = "\030\000\
\003\000\103\000\044\000\075\000\044\001\003\001\028\001\030\000\
\048\001\007\001\047\001\014\000\049\001\044\000\001\000\028\001\
\003\001\048\000\044\001\045\001\007\001\030\000\044\001\026\000\
\042\000\023\001\024\001\045\000\015\001\131\000\028\001\044\001\
\017\001\015\000\005\001\044\000\023\001\024\001\020\000\048\000\
\044\001\043\001\060\000\028\001\075\000\030\001\049\001\065\000\
\066\000\067\000\045\001\123\000\034\000\047\001\057\000\042\001\
\019\001\006\001\021\001\077\000\078\000\103\000\080\000\081\000\
\042\001\083\000\075\000\016\001\017\001\018\001\142\000\020\001\
\103\000\046\001\105\000\147\000\148\000\043\001\028\001\028\001\
\044\001\030\001\105\000\043\001\102\000\019\001\104\000\021\001\
\022\001\131\000\043\001\043\001\123\000\047\001\103\000\046\001\
\105\000\019\001\044\001\117\000\131\000\027\000\028\000\029\000\
\003\001\004\001\005\001\138\000\007\001\042\001\022\001\142\000\
\143\000\144\000\123\000\138\000\147\000\148\000\136\000\049\001\
\143\000\144\000\131\000\021\001\023\001\024\001\049\001\001\001\
\002\001\138\000\019\001\019\001\006\001\142\000\143\000\144\000\
\010\001\042\001\147\000\148\000\019\001\042\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\019\001\001\000\026\000\
\012\000\034\000\028\001\079\000\030\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\150\000\044\001\045\001\046\001\047\001\048\001\049\001\
\001\001\002\001\124\000\003\001\255\255\006\001\255\255\007\001\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\023\001\
\024\001\255\255\255\255\028\001\255\255\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\001\001\002\001\045\001\046\001\047\001\006\001\
\049\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\006\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\001\001\002\001\016\001\017\001\018\001\028\001\020\001\030\001\
\255\255\010\001\255\255\255\255\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\042\001\001\001\002\001\045\001\046\001\
\047\001\255\255\049\001\255\255\255\255\010\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\255\255\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\001\001\002\001\255\255\
\255\255\003\001\255\255\255\255\049\001\007\001\010\001\255\255\
\255\255\255\255\255\255\255\255\255\255\015\001\001\001\002\001\
\255\255\255\255\255\255\255\255\255\255\023\001\024\001\010\001\
\255\255\255\255\255\255\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\039\001\040\001\041\001\255\255\255\255\
\255\255\255\255\255\255\047\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\001\001\
\002\001\255\255\255\255\046\001\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001\
\255\255\255\255\255\255\045\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\255\255\
\255\255\255\255\045\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\018\001\255\255\020\001\006\001\255\255\023\001\
\024\001\255\255\255\255\255\255\028\001\255\255\030\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\255\255\255\255\
\255\255\255\255\042\001\028\001\255\255\030\001\255\255\047\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\006\001\
\255\255\255\255\255\255\044\001\255\255\046\001\047\001\048\001\
\049\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\255\255\255\255\255\255\255\255\255\255\028\001\255\255\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\006\001\255\255\042\001\255\255\255\255\045\001\046\001\
\047\001\255\255\049\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\001\001\002\001\255\255\255\255\255\255\028\001\
\255\255\030\001\255\255\010\001\255\255\255\255\001\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\046\001\047\001\255\255\049\001\255\255\255\255\255\255\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\001\001\002\001\255\255\255\255\006\001\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\001\001\002\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\010\001\255\255\255\255\
\255\255\255\255\028\001\255\255\030\001\255\255\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\031\001\032\001\033\001\034\001\035\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\001\001\002\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\010\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\031\001\032\001\033\001\034\001\
\035\001\036\001\037\001\038\001\039\001\040\001\041\001\008\001\
\009\001\255\255\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\255\255\
\255\255\255\255\255\255\255\255\037\001\038\001\255\255\255\255\
\255\255\255\255\043\001\255\255\045\001\008\001\009\001\255\255\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\255\255\255\255\255\255\255\255\
\255\255\255\255\037\001\038\001\255\255\255\255\255\255\042\001\
\043\001\008\001\009\001\255\255\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\010\001\255\255\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\037\001\038\001\
\255\255\255\255\255\255\255\255\043\001\031\001\032\001\033\001\
\034\001\035\001\036\001\037\001\038\001\039\001\040\001\041\001"

let yynames_const = "\
  T_and\000\
  T_or\000\
  T_char\000\
  T_decl\000\
  T_def\000\
  T_exit\000\
  T_list\000\
  T_head\000\
  T_tail\000\
  T_mod\000\
  T_new\000\
  T_nil\000\
  T_nil_qm\000\
  T_not\000\
  T_ref\000\
  T_return\000\
  T_skip\000\
  T_for\000\
  T_end\000\
  T_if\000\
  T_else\000\
  T_elsif\000\
  T_int\000\
  T_bool\000\
  T_true\000\
  T_false\000\
  T_eq\000\
  T_uneq\000\
  T_leq\000\
  T_geq\000\
  T_lower\000\
  T_greater\000\
  T_plus\000\
  T_minus\000\
  T_times\000\
  T_div\000\
  T_cons\000\
  T_rparen\000\
  T_lparen\000\
  T_lbrack\000\
  T_rbrack\000\
  T_comma\000\
  T_semicol\000\
  T_assign\000\
  T_colon\000\
  T_eof\000\
  "

let yynames_block = "\
  T_intconst\000\
  T_id\000\
  T_charconst\000\
  T_stringconst\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_defdecl) in
    Obj.repr(
# 113 "Parser.mly"
                        ( _1 )
# 491 "Parser.ml"
               : Ast.ast_defdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : ast_header) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : ast_defdecl list) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : ast_stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 115 "Parser.mly"
                                                                      ( D_func_def (_2, _4, (_5::_6)) )
# 501 "Parser.ml"
               : ast_defdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_header) in
    Obj.repr(
# 117 "Parser.mly"
                                ( (_1, second _2, third _2) )
# 509 "Parser.ml"
               : ast_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_header) in
    Obj.repr(
# 118 "Parser.mly"
                           ( (TY_proc, second _1, third _1) )
# 516 "Parser.ml"
               : ast_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Ast.id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_formal list) in
    Obj.repr(
# 120 "Parser.mly"
                                                  ( (TY_none, _1, _3) )
# 524 "Parser.ml"
               : ast_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.id) in
    Obj.repr(
# 121 "Parser.mly"
                                      ( (TY_none, _1, []) )
# 531 "Parser.ml"
               : ast_header))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_formal) in
    Obj.repr(
# 123 "Parser.mly"
                      ( ([_1]) )
# 538 "Parser.ml"
               : ast_formal list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_formal) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_formal list) in
    Obj.repr(
# 124 "Parser.mly"
                                            ( (_1 :: _3) )
# 546 "Parser.ml"
               : ast_formal list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_defdecl) in
    Obj.repr(
# 126 "Parser.mly"
                             ( (Symbol.PASS_BY_REFERENCE, _2) )
# 553 "Parser.ml"
               : ast_formal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_defdecl) in
    Obj.repr(
# 127 "Parser.mly"
                       ( (Symbol.PASS_BY_VALUE, _1) )
# 560 "Parser.ml"
               : ast_formal))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "Parser.mly"
                     ( TY_int )
# 566 "Parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 130 "Parser.mly"
                      ( TY_bool )
# 572 "Parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 131 "Parser.mly"
                      ( TY_char )
# 578 "Parser.ml"
               : typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    Obj.repr(
# 132 "Parser.mly"
                                      ( TY_array (_1, 0) )
# 585 "Parser.ml"
               : typ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    Obj.repr(
# 133 "Parser.mly"
                                             ( TY_list (_3) )
# 592 "Parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 135 "Parser.mly"
                             ( ([]) )
# 598 "Parser.ml"
               : ast_defdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_defdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_defdecl list) in
    Obj.repr(
# 136 "Parser.mly"
                                     ( (_1 :: _2) )
# 606 "Parser.ml"
               : ast_defdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_defdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_defdecl list) in
    Obj.repr(
# 137 "Parser.mly"
                                      ( (_1 :: _2) )
# 614 "Parser.ml"
               : ast_defdecl list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_defdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_defdecl list) in
    Obj.repr(
# 138 "Parser.mly"
                                    ( (_1 :: _2) )
# 622 "Parser.ml"
               : ast_defdecl list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_header) in
    Obj.repr(
# 140 "Parser.mly"
                             ( D_func_decl (_2) )
# 629 "Parser.ml"
               : ast_defdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 142 "Parser.mly"
                             ( ([]) )
# 635 "Parser.ml"
               : id list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : id list) in
    Obj.repr(
# 143 "Parser.mly"
                                    ( (_2 :: _3) )
# 643 "Parser.ml"
               : id list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : id list) in
    Obj.repr(
# 145 "Parser.mly"
                                 ( D_var_def(_1, _2 :: _3) )
# 652 "Parser.ml"
               : ast_defdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 147 "Parser.mly"
                             ( ([]) )
# 658 "Parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt list) in
    Obj.repr(
# 148 "Parser.mly"
                              ( (_1 :: _2) )
# 666 "Parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "Parser.mly"
                             ( ([]) )
# 672 "Parser.ml"
               : (ast_expr * ast_stmt list) list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : ast_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : ast_stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : (ast_expr * ast_stmt list) list) in
    Obj.repr(
# 151 "Parser.mly"
                                                              ( ((_2, (_4 :: _5)) :: _6) )
# 682 "Parser.ml"
               : (ast_expr * ast_stmt list) list))
; (fun __caml_parser_env ->
    Obj.repr(
# 153 "Parser.mly"
                             ( ([]) )
# 688 "Parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : ast_stmt list) in
    Obj.repr(
# 154 "Parser.mly"
                                              ( (_3 :: _4) )
# 696 "Parser.ml"
               : ast_stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_simple) in
    Obj.repr(
# 156 "Parser.mly"
                      ( ST_simple (_1) )
# 703 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 157 "Parser.mly"
                      ( ST_exit )
# 709 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 158 "Parser.mly"
                             ( ST_return(_2) )
# 716 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : ast_expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : ast_stmt) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : ast_stmt list) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : (ast_expr * ast_stmt list) list) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 159 "Parser.mly"
                                                                           ( ST_if(_2, (_4 :: _5), _6, _7) )
# 727 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : ast_simple list) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : ast_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : ast_simple list) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : ast_stmt) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : ast_stmt list) in
    Obj.repr(
# 161 "Parser.mly"
                ( ST_for(_2, _4, _6, (_8 :: _9)) )
# 738 "Parser.ml"
               : ast_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 163 "Parser.mly"
                      ( S_skip )
# 744 "Parser.ml"
               : ast_simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 164 "Parser.mly"
                                  ( S_assign(_1, _3) )
# 752 "Parser.ml"
               : ast_simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_call) in
    Obj.repr(
# 165 "Parser.mly"
                    ( S_call(_1) )
# 759 "Parser.ml"
               : ast_simple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_simple) in
    Obj.repr(
# 167 "Parser.mly"
                      ( ([_1]) )
# 766 "Parser.ml"
               : ast_simple list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_simple) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_simple list) in
    Obj.repr(
# 168 "Parser.mly"
                                          ( (_1 :: _3) )
# 774 "Parser.ml"
               : ast_simple list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr list) in
    Obj.repr(
# 170 "Parser.mly"
                                       ( (_1, _3) )
# 782 "Parser.ml"
               : ast_call))
; (fun __caml_parser_env ->
    Obj.repr(
# 172 "Parser.mly"
                        ( ([]) )
# 788 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : ast_expr list) in
    Obj.repr(
# 173 "Parser.mly"
                                  ( (_1) )
# 795 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 175 "Parser.mly"
                    ( ([_1]) )
# 802 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr list) in
    Obj.repr(
# 176 "Parser.mly"
                                      ( (_1 :: _3) )
# 810 "Parser.ml"
               : ast_expr list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.id) in
    Obj.repr(
# 178 "Parser.mly"
                    ( A_id(_1) )
# 817 "Parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 179 "Parser.mly"
                             ( A_string(_1) )
# 824 "Parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : ast_atom) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 180 "Parser.mly"
                                           ( A_atom_el(_1, _3) )
# 832 "Parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_call) in
    Obj.repr(
# 181 "Parser.mly"
                    ( A_call(_1) )
# 839 "Parser.ml"
               : ast_atom))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "Parser.mly"
                      ( (BP_plus) )
# 845 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "Parser.mly"
                       ( (BP_minus) )
# 851 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 185 "Parser.mly"
                       ( (BP_times) )
# 857 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 186 "Parser.mly"
                     ( (BP_div) )
# 863 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "Parser.mly"
                     ( (BP_mod) )
# 869 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 188 "Parser.mly"
                      ( (BP_cons) )
# 875 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "Parser.mly"
                    ( (BP_eq) )
# 881 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 190 "Parser.mly"
                      ( (BP_uneq) )
# 887 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 191 "Parser.mly"
                       ( (BP_lower) )
# 893 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "Parser.mly"
                         ( (BP_greater) )
# 899 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 193 "Parser.mly"
                     ( (BP_leq) )
# 905 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 194 "Parser.mly"
                     ( (BP_geq) )
# 911 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "Parser.mly"
                     ( (BP_and) )
# 917 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    Obj.repr(
# 196 "Parser.mly"
                    ( (BP_or) )
# 923 "Parser.ml"
               : b_oper))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : ast_atom) in
    Obj.repr(
# 198 "Parser.mly"
                    ( E_atom(_1) )
# 930 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 199 "Parser.mly"
                          ( E_int_const(_1) )
# 937 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : char) in
    Obj.repr(
# 200 "Parser.mly"
                           ( E_char_const(_1) )
# 944 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 201 "Parser.mly"
                                      ( (_2) )
# 951 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 202 "Parser.mly"
                                       ( E_unary_op(UP_plus, _2) )
# 958 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 203 "Parser.mly"
                                        ( E_unary_op(UP_minus, _2) )
# 965 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : ast_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : b_oper) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 204 "Parser.mly"
                                  ( (E_binary_op(_1, _2, _3)) )
# 974 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "Parser.mly"
                      ( E_bool_const(true) )
# 980 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 206 "Parser.mly"
                       ( E_bool_const(false) )
# 986 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : ast_expr) in
    Obj.repr(
# 207 "Parser.mly"
                          ( E_unary_op(UP_not, _2) )
# 993 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 208 "Parser.mly"
                                                 ( E_new(_2, _4) )
# 1001 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "Parser.mly"
                     ( (E_nil) )
# 1007 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 210 "Parser.mly"
                                               ( E_unary_op(UP_nil, _3) )
# 1014 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 211 "Parser.mly"
                                             ( E_unary_op(UP_head, _3) )
# 1021 "Parser.ml"
               : ast_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : ast_expr) in
    Obj.repr(
# 212 "Parser.mly"
                                             ( E_unary_op(UP_tail, _3) )
# 1028 "Parser.ml"
               : ast_expr))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.ast_defdecl)
